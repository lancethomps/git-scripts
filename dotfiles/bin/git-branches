#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.git_command_defaults.sh
source "${_SCRIPT_DIR}/.git_command_defaults.sh" || exit 1
##################################################################################################################################################

DEFAULT_BRANCH_ARG="${DEFAULT_BRANCH_ARG:-refs/remotes/origin/}"

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--all-branches] [--full] [--no-branch-arg] [--simple] [<for_each_ref_arg>...]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME} --all-branches
       ${_SCRIPT_NAME} --simple
       ${_SCRIPT_NAME} refs/remotes/origin/lance
EOF
}
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    --all-branches)
      all_branches=true
      shift
      ;;
    --full)
      full=true
      shift
      ;;
    --no-branch-arg)
      no_branch_arg=true
      shift
      ;;
    --simple)
      simple=true
      shift
      ;;
    --)
      shift
      PASSTHROUGH_ARGS+=("$@")
      shift "$#"
      break
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

function has_branch_arg_as_first_arg() {
  test "${#PASSTHROUGH_ARGS[@]}" -ne 0 && check_not_true "${no_branch_arg-}"
}

for_each_ref_args=()
if check_not_true "${all_branches-}" && ! has_branch_arg_as_first_arg; then
  for_each_ref_args+=("${DEFAULT_BRANCH_ARG}")
fi

if check_true "${simple-}"; then
  GIT_BRANCH_REF_FORMAT='%(refname:short)'
elif check_true "${full-}"; then
  GIT_BRANCH_REF_FORMAT="${GIT_BRANCH_REF_FORMAT_FULL}"
fi

for_each_ref_args+=("${PASSTHROUGH_ARGS[@]}" --sort='-committerdate' --format="${GIT_BRANCH_REF_FORMAT}")
log_debug_or_verbose git for-each-ref "${for_each_ref_args[@]}"
exit_if_debug

git for-each-ref "${for_each_ref_args[@]}"
