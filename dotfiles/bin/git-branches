#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.command_defaults.sh
source "${_SCRIPT_DIR}/.command_defaults.sh" || exit 1
##################################################################################################################################################

sort_by="${sort_by:--committerdate}"

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--all-branches] [--full] [--no-branch-arg] [--remove-dupes] [--simple] [--sort-by <sort_by>] [<for_each_ref_arg>...]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME} --all-branches
       ${_SCRIPT_NAME} --simple
       ${_SCRIPT_NAME} refs/remotes/origin/lance
EOF
}
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    --all-branches)
      all_branches=true
      shift
      ;;
    --full)
      full=true
      shift
      ;;
    --no-branch-arg)
      no_branch_arg=true
      shift
      ;;
    --remove-dupes)
      remove_dupes=true
      shift
      ;;
    --simple)
      simple=true
      shift
      ;;
    --sort-by)
      shift
      sort_by="$1"
      shift
      ;;
    --)
      shift
      PASSTHROUGH_ARGS+=("$@")
      shift "$#"
      break
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

function has_branch_arg_as_first_arg() {
  test "${#PASSTHROUGH_ARGS[@]}" -ne 0 && check_not_true "${no_branch_arg-}"
}

function main() {
  local for_each_ref_args ref_format

  for_each_ref_args=(for-each-ref)
  if check_not_true "${all_branches-}" && ! has_branch_arg_as_first_arg; then
    if test -n "${DEFAULT_BRANCH_ARG-}"; then
      for_each_ref_args+=("${DEFAULT_BRANCH_ARG}")
    else
      for_each_ref_args+=(
        refs/heads/
        refs/remotes/origin/
      )
    fi
  fi

  if check_true "${simple-}"; then
    ref_format='%(refname:short)'
  elif check_true "${full-}"; then
    ref_format="$(git_branch_ref_format_full)"
  elif test -n "${GIT_BRANCH_REF_FORMAT-}"; then
    ref_format="${GIT_BRANCH_REF_FORMAT}"
  else
    ref_format="$(git_branch_ref_format)"
  fi

  for_each_ref_args+=("${PASSTHROUGH_ARGS[@]}" --sort="$sort_by" --format="${ref_format}")
  check_debug && echo git "${for_each_ref_args[@]}" && exit 0

  if check_true "${remove_dupes-}"; then
    log_verbose_and_run git "${for_each_ref_args[@]}" --color=always | gsed -r 's/\borigin\///g' | sort -r -u
  else
    log_verbose_and_run git "${for_each_ref_args[@]}"
  fi
}

main
