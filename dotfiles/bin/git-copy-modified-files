#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.git_command_defaults.sh
source "${_SCRIPT_DIR}/.git_command_defaults.sh" || exit 1
##################################################################################################################################################

DIRECTION="outgoing"

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0" | sed -E 's/^git-/git /g')"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--from] <copy_to_or_from_dir>
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME} ~/github/to-repo
       ${_SCRIPT_NAME} --from ~/github/from-repo
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      shift
      export debug_mode=true
      ;;
    --verbose)
      shift
      export verbose=true
      ;;
    --from)
      shift
      DIRECTION="incoming"
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Unknown option: $1"
      _usage
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

if test -z "${1:-}"; then
  _usage "$@"
  exit 1
fi
##################################################################################################################################################

COPY_DIR="${1:-}"

if ! test -e "${COPY_DIR}"; then
  echo "Directory to copy from/to does not exist: ${COPY_DIR}"
  exit 1
fi

COPY_DIR="$(realpath "$COPY_DIR")"
DEST_DIR="${COPY_DIR}/"
SOURCE_DIR=""
MODIFIED_FILES_CMD=()
if test "$DIRECTION" = "incoming"; then
  DEST_DIR=""
  SOURCE_DIR="${COPY_DIR}/"
  MODIFIED_FILES_CMD+=(-C "$COPY_DIR")
fi
MODIFIED_FILES_CMD+=(
  ls-files
  --others
  --exclude-standard
  --modified
)
mapfile -t MODIFIED_FILES < <(git "${MODIFIED_FILES_CMD[@]}" | sort)
if test -z "${MODIFIED_FILES-}"; then
  echo "No modified files!"
  exit 1
fi
FIRST_PAD="$(longest_line_length "${MODIFIED_FILES[@]}")"
if test "$DIRECTION" = "incoming"; then
  FIRST_PAD=$((FIRST_PAD + ${#SOURCE_DIR}))
fi
PRINT_FORMAT="%-${FIRST_PAD}s -> %s"$'\n'

for file in "${MODIFIED_FILES[@]}"; do
  source_file="${SOURCE_DIR}${file}"
  dest_file="${DEST_DIR}${file}"
  dest_dir="$(dirname "$dest_file")"
  # shellcheck disable=SC2059
  printf "$PRINT_FORMAT" "$source_file" "$dest_file"

  if check_debug; then
    echo '[DEBUG]' cp -f "$source_file" "$dest_file"
  else
    if ! test -e "$dest_dir"; then
      mkdir -pv "$dest_dir"
    fi
    cp -f "$source_file" "$dest_file"
  fi
done
