#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.git_command_defaults.sh
source "${_SCRIPT_DIR}/.git_command_defaults.sh" || exit 1
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    --auto-confirm)
      auto_confirm=true
      shift
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

CURRENT_BRANCH_NAME="$(git current-branch)"
BRANCH_NAME="${PASSTHROUGH_ARGS[0]:-$CURRENT_BRANCH_NAME}"

if echo " ${BRANCH_NAME}" | pcregrep --quiet "$GIT_BRANCH_SKIP_REGEX"; then
  echo "Cannot delete branch '${BRANCH_NAME}' because it matched the GIT_BRANCH_SKIP_REGEX: ${GIT_BRANCH_SKIP_REGEX}"
  exit 1
fi

if test -z "${PASSTHROUGH_ARGS[0]:-}" && ! confirm_with_auto "Delete local and remote branch '${BRANCH_NAME}'?"; then
  exit 1
fi

if ! git has-remote "${BRANCH_NAME}"; then
  echo "No upstream, not deleting remote branch..."
else
  git push --delete origin "${BRANCH_NAME}"
fi

if test "${CURRENT_BRANCH_NAME}" = "${BRANCH_NAME}"; then
  git checkout "$(git default-branch)"
fi

if ! git branch -d "${BRANCH_NAME}"; then
  if ! confirm_with_auto "Force delete local branch '${BRANCH_NAME}'?"; then
    exit 1
  fi
  git branch -D "${BRANCH_NAME}"
else
  exit 0
fi
