#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.git_command_defaults.sh
source "${_SCRIPT_DIR}/.git_command_defaults.sh" || exit 1
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    --auto-confirm)
      auto_confirm=true
      shift
      ;;
    --select)
      select=true
      shift
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

if ! git has-untracked; then
  exit 0
fi

git_clean_args=(
  -d
  --force
  "${PASSTHROUGH_ARGS[@]}"
)

git clean --dry-run "${git_clean_args[@]}"
echo_sep

if check_true "${select-}"; then
  mapfile -t remove_files < <(git clean --dry-run "${git_clean_args[@]}" | sed -E 's/^Would remove //g' | select_prompt_fzf --header "Select files to remove")
  if test "${#remove_files[@]}" -eq 0; then
    exit_fatal "No files selected"
  fi
  echo_with_title_sep "Removing below files..."
  join_by_newline_with_end "${remove_files[@]}"
  rm -rf "${remove_files[@]}"
elif confirm_with_auto 'Delete above untracked files?'; then
  git clean "${git_clean_args[@]}"
fi
