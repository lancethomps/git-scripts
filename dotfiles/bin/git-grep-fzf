#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.command_defaults.sh
source "${_SCRIPT_DIR}/.command_defaults.sh" || exit 1
##################################################################################################################################################

if test -z "${_GREP_ARGS-}"; then
  _GREP_ARGS=()
fi

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"
_SCRIPT_NAME_GIT="${_SCRIPT_NAME/git-/git }"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME_GIT} [--use-case] <grep_args>...
       ${SYNOP_INDENT}     [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME_GIT} \"search for string\"
       ${_SCRIPT_NAME_GIT} --use-case xyz
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      shift
      export debug_mode=true
      ;;
    --verbose)
      shift
      export verbose=true
      ;;
    --use-case)
      shift
      use_case=true
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

if test -z "${1:-}"; then
  _usage "$@"
  exit 1
fi
##################################################################################################################################################

if check_not_true "${use_case-}" && ! [[ ${*: -1} =~ [A-Z] ]]; then
  _GREP_ARGS+=(-i)
fi

USE_BAT_IF_AVAILABLE="${USE_BAT_IF_AVAILABLE:-false}"

function create_preview_file_cmd() {
  local preview_grep_args
  preview_grep_args="$(get_args_quoted "${_GREP_ARGS[@]}")"

  if check_true "${USE_BAT_IF_AVAILABLE}" && command -v bat >/dev/null 2>&1; then
    echo "bat --color=always --paging=always --style=numbers --pager \"less --pattern=${1}\" \"\$filename\""
  else
    echo "git grep -h -C 20 $preview_grep_args -- \"\$filename\""
  fi
}

function create_open_grepped_lines_args() {
  open_grepped_lines_args=(
    --ask
    --line-numbers
    --select-lines
    --select-header "use right arrow to open in idea | git grep ${_GREP_ARGS[*]}"
    --select-preview-file-cmd "$(create_preview_file_cmd "$@")"
  )
  export open_grepped_lines_args
}

_GREP_ARGS+=("$@")

if ! test -t 1; then
  git grep "${_GREP_ARGS[@]}"
  exit $?
fi
_GREP_ARGS=(
  "--color=always"
  "${_GREP_ARGS[@]}"
)

if check_debug; then
  create_open_grepped_lines_args "$@"
  echo "_GREP_ARGS:              ${_GREP_ARGS[*]}"
  echo "open_grepped_lines_args: ${open_grepped_lines_args[*]}"
  exit 0
fi

if command -v open_grepped_lines >/dev/null 2>&1; then
  create_open_grepped_lines_args "$@"
  git grep "${_GREP_ARGS[@]}" | open_grepped_lines "${open_grepped_lines_args[@]}" -
else
  git grep "${_GREP_ARGS[@]}"
fi
