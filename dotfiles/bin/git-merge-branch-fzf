#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck disable=SC1090
if test -e "${_SCRIPT_DIR}/.git_command_defaults.sh"; then source "${_SCRIPT_DIR}/.git_command_defaults.sh"; else echo '"${_SCRIPT_DIR}/.git_command_defaults.sh" does not exist - resolved to: '"${_SCRIPT_DIR}/.git_command_defaults.sh" && exit 1; fi
set -o errexit -o errtrace -o nounset
##################################################################################################################################################

if test -n "${1:-}" && git does-branch-exist "${1:-}"; then
  GIT_BRANCH="$1"
  shift
else
  GIT_CURRENT_BRANCH="$(git current-branch)"
  GIT_BRANCH="$(git branches-info refs/remotes/origin/ --color=always | grep -Ev "origin/(HEAD|${GIT_CURRENT_BRANCH})$" | fzf --ansi --no-sort --layout "reverse" --header "Current branch: ${GIT_CURRENT_BRANCH}" | pcregrep -o1 '\t([^\t]+)$')"
fi

if check_debug; then
  echo "DEBUG: git merge --no-edit $* ${GIT_BRANCH}"
else
  git merge --no-edit "$@" "${GIT_BRANCH}"
fi
