#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.command_defaults.sh
source "${_SCRIPT_DIR}/.command_defaults.sh" || exit 1
##################################################################################################################################################

FETCH_OLDER_THAN_MINUTES="${FETCH_OLDER_THAN_MINUTES:-60}"

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--force-fetch | --no-fetch] [--major | --minor | --patch]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME}
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      export debug_mode=true
      shift
      ;;
    --verbose)
      export verbose=true
      shift
      ;;
    --force-fetch)
      force_fetch=true
      shift
      ;;
    --no-fetch)
      no_fetch=true
      shift
      ;;
    --major)
      major=true
      shift
      ;;
    --minor)
      minor=true
      shift
      ;;
    --patch)
      patch=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      _usage
      exit 1
      ;;
  esac
done
##################################################################################################################################################

declare -x last_tag next_tag

function do_fetch() {
  log_verbose "Fetching latest tags"
  git fetch --tags >&2
}

function get_last_tag() {
  if ! last_tag="$(git latest-tag | sed -E 's/v//g')"; then
    exit_fatal "Could not find last_tag: ${last_tag}"
  fi

  return 0
}

function get_next_tag() {
  local bump_part="minor"

  if check_true "${major-}"; then
    bump_part="major"
  elif check_true "${minor-}"; then
    bump_part="minor"
  elif check_true "${patch-}"; then
    bump_part="patch"
  fi

  if ! next_tag="$(semver_bump --part "${bump_part}" "$last_tag")"; then
    exit_fatal "Could not create next_tag: ${next_tag}"
  fi

  return 0
}

function main() {
  if check_true "${no_fetch-}"; then
    log_verbose "Not fetching due to --no-fetch"
  elif check_true "${force_fetch-}"; then
    do_fetch
  elif git last-fetch-older-than "$FETCH_OLDER_THAN_MINUTES"; then
    do_fetch
  fi

  get_last_tag
  get_next_tag
  echo "$next_tag"
}

main
