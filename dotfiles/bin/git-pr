#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.git_command_defaults.sh
source "${_SCRIPT_DIR}/.git_command_defaults.sh" || exit 1
##################################################################################################################################################

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local _SCRIPT_NAME_GIT
  _SCRIPT_NAME_GIT="${_SCRIPT_NAME/git-/git }"

  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME_GIT}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME_GIT} [--no-body] [--no-open] [--simple] [--to-ref <to_ref>]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME_GIT}
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      export debug_mode=true
      shift
      ;;
    --verbose)
      export verbose=true
      shift
      ;;
    --no-body)
      no_body=true
      shift
      ;;
    --no-open)
      no_open=true
      shift
      ;;
    --simple)
      simple=true
      shift
      ;;
    --to-ref)
      shift
      to_ref="$1"
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Unknown option: $1"
      _usage
      exit 1
      ;;
    *)
      to_ref="$1"
      shift
      break
      ;;
  esac
done
##################################################################################################################################################

if test -z "${to_ref-}"; then
  to_ref="$(git default-branch)"
fi
export PR_TO_REF="$to_ref"

git_url="$(git url)"
scm_domain="$(echo "$git_url" | pcregrep -o3 "$GIT_URL_REGEX")"
git_current_branch="$(git current-branch)"
git_current_branch_url="$(urlencode_git_current_branch "$git_current_branch")"

function github_url() {
  local url_base query_params=()

  if test "${simple-}" = "true"; then
    echo "${browse_url_root}/pull/new/${git_current_branch_url}"
    return 0
  fi

  url_base="${browse_url_root}/compare/${PR_TO_REF}...${git_current_branch_url}"
  query_params+=("title=$(git pr-title --urlencode)")

  if ! check_true "${no_body-}"; then
    if command -v git-pr-description-custom >/dev/null 2>&1; then
      query_params+=("body=$(git pr-description-custom --urlencode)")
    else
      query_params+=("body=$(url_encode_py "$(git pr-description)")")
    fi
  fi

  echo "${url_base}?quick_pull=1&$(join_by "&" "${query_params[@]}")"
}

function bitbucket_url() {
  echo "${browse_url_root}/compare/commits?sourceBranch=refs/heads/${git_current_branch_url}"
}

browse_url_root="$(git ui-url-root)"
if test "$scm_domain" = 'github.com'; then
  pr_url="$(github_url)"
else
  pr_url="$(bitbucket_url)"
fi

if check_debug; then
  echo "$pr_url"
elif ! check_true "${no_open-}"; then
  open "$pr_url"
else
  exit 0
fi
