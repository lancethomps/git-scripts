#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import argparse
import os
from typing import List

from ltpylib import gitrepos, opts, opts_actions
from ltpylib.strconverters import url_encode


class ScriptArgs(opts.BaseArgs):

  def __init__(self, args: argparse.Namespace):
    super().__init__(args)

    self.to_ref: str = args.to_ref if args.to_ref else os.getenv("PR_TO_REF")
    self.use_branch: bool = args.use_branch
    self.urlencode: bool = args.urlencode

    if not self.to_ref:
      self.to_ref = "origin/" + gitrepos.default_branch()
    elif not self.to_ref.startswith("origin/"):
      self.to_ref = "origin/" + self.to_ref

    self.git_pr_cmd_args: List[str] = ["--to-ref", self.to_ref]


def main():
  args = _parse_args()
  pr_description = None if args.use_branch else gitrepos.pr_description(add_args=args.git_pr_cmd_args)
  if pr_description and len(pr_description.splitlines()) == 1:
    output = pr_description
  elif pr_description and gitrepos.pr_commits_count(add_args=args.git_pr_cmd_args) == 1:
    output = pr_description.splitlines()[0]
  else:
    output = gitrepos.current_branch()

  if args.urlencode:
    output = url_encode(output)

  print(output)


def _parse_args() -> ScriptArgs:
  arg_parser = opts.create_default_arg_parser()

  arg_parser.add_argument("--to-ref")
  arg_parser.add_argument("--use-branch", action=opts_actions.STORE_TRUE)
  arg_parser.add_argument("--urlencode", action=argparse.BooleanOptionalAction)

  return ScriptArgs(opts.parse_args_and_init_others(arg_parser))


if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    exit(130)
