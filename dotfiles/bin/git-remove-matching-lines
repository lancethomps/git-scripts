#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.common_copy.sh
source "${_SCRIPT_DIR}/.common_copy.sh" || exit 1
set -o errexit -o errtrace -o nounset
##################################################################################################################################################

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--auto-confirm] [-ne | --no-exit-status] <pattern> [<git_grep_arg>..]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME}
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
PASSTHROUGH_ARGS=()
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      export debug_mode=true
      shift
      ;;
    --verbose)
      export verbose=true
      shift
      ;;
    --auto-confirm | -ac)
      export auto_confirm=true
      shift
      ;;
    -ne | --no-exit-status)
      no_exit_status=true
      shift
      ;;
    *)
      PASSTHROUGH_ARGS+=("$1")
      shift
      ;;
  esac
done
##################################################################################################################################################

function remove_matching_lines() {
  local pattern="$1" match_f lines_count
  shift

  for match_f in "$@"; do
    if ! test -e "$match_f"; then
      exit_fatal "File $match_f does not exist!"
    fi

    if lines_count="$(grep -Ec "$pattern" "$match_f")" && test "$lines_count" -gt 0; then
      if confirm_with_auto "${lines_count} lines will be removed, continue with replace?"; then
        gsed -i -r "/${pattern//\//\\\/}/d" "$match_f"
      fi
    fi
  done
}

function main() {
  local pattern="$1" git_grep_args matching_files
  shift

  git_grep_args=("$pattern" "$@")
  mapfile -t matching_files < <(git --no-pager grep --name-only "${git_grep_args[@]}")

  if test "${#matching_files[@]}" -eq 0; then
    log_stderr "No matches found"
    if check_true "${no_exit_status-}"; then
      return 0
    else
      return 1
    fi
  fi

  log_with_title_sep "MATCHES"
  git --no-pager grep "${git_grep_args[@]}"
  log_sep

  if ! confirm_with_auto "Remove matching lines?"; then
    if check_true "${no_exit_status-}"; then
      return 0
    else
      return 1
    fi
  fi

  export auto_confirm=true
  log_and_run remove_matching_lines "$pattern" "${matching_files[@]}"
}

main "${PASSTHROUGH_ARGS[@]}"
