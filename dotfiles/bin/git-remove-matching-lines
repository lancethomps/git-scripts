#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.common_copy.sh
source "${_SCRIPT_DIR}/.common_copy.sh" || exit 1
set -o errexit -o errtrace -o nounset
##################################################################################################################################################

function remove_matching_lines() {
  local pattern="$1" match_f lines_count
  shift

  for match_f in "$@"; do
    if ! test -e "$match_f"; then
      exit_fatal "File $match_f does not exist!"
    fi

    if lines_count="$(grep -Ec "$pattern" "$match_f")" && test "$lines_count" -gt 0; then
      if confirm_with_auto "${lines_count} lines will be removed, continue with replace?"; then
        gsed -i -r "/${pattern//\//\\\/}/d" "$match_f"
      fi
    fi
  done
}

function main() {
  local pattern="$1" git_grep_args matching_files
  shift

  git_grep_args=("$pattern" "$@")
  mapfile -t matching_files < <(git --no-pager grep --name-only "${git_grep_args[@]}")

  if test "${#matching_files[@]}" -eq 0; then
    log_stderr "No matches found"
    return 1
  fi

  log_with_title_sep "MATCHES"
  git --no-pager grep "${git_grep_args[@]}"
  log_sep

  if ! confirm_with_auto "Remove matching lines?"; then
    return 1
  fi

  export auto_confirm=true
  log_and_run remove_matching_lines "$pattern" "${matching_files[@]}"
}

main "$@"
