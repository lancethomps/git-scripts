#!/usr/bin/env bash
################################################################### SETUP ########################################################################
set -o errexit -o errtrace -o nounset
##################################################################################################################################################

declare -x GREP_OPTIONS="" flags='' use_gsed=true git_grep_end_args xargs_args do_grep_replacement git_grep_config_args=(-c grep.fullname=false -c grep.patterntype=perl -c submodule.recurse=false)

if command -v git-in-repo >/dev/null 2>&1 && ! git in-repo; then
  echo "Not in a git repo"
  exit 1
fi

if ! command -v gsed >/dev/null 2>&1 || ! command -v pcregrep >/dev/null 2>&1 || ! command -v sd >/dev/null 2>&1; then
  if test "$(uname)" = "Darwin"; then
    echo "gsed or pcregrep not found, running: brew install gsed pcre sd"
    brew install gsed pcre sd
  elif ! command -v pcregrep >/dev/null 2>&1; then
    echo "pcregrep not found and could not determine how to install it. Please install it manually."
    exit 1
  else
    alias gsed='sed'
    if ! command -v sd >/dev/null 2>&1; then
      use_gsed=true
    fi
  fi
fi

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local _SCRIPT_NAME_GIT
  _SCRIPT_NAME_GIT="${_SCRIPT_NAME/git-/git }"

  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME_GIT}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME_GIT} [-f | --flags <flags>] [--git-grep-regex <git_grep_regex>] [-ne | --no-exit-status] [--no-grep-replacement] [--no-print-matches | --print-name-only] [-s | --string-mode] [--use-gsed | --use-sd]
       ${SYNOP_INDENT} <search> <replacement> [<git_grep_arg>...]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME_GIT} --flags g xyz abc
EOF
}
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
END_ARGS=()
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      export debug_mode=true
      shift
      ;;
    --verbose)
      export verbose=true
      shift
      ;;
    -f | --flags)
      shift
      flags="$1"
      shift
      ;;
    --git-grep-regex)
      shift
      git_grep_regex="$1"
      shift
      ;;
    -ne | --no-exit-status)
      no_exit_status=true
      shift
      ;;
    --no-grep-replacement)
      do_grep_replacement=false
      shift
      ;;
    --no-print-matches)
      no_print_matches=true
      shift
      ;;
    --print-name-only)
      print_name_only=true
      shift
      ;;
    -s | --string-mode)
      string_mode=true
      shift
      ;;
    --use-gsed)
      use_gsed=true
      shift
      ;;
    --use-sd)
      use_gsed=false
      shift
      ;;
    --)
      END_ARGS+=("$@")
      shift "$#"
      break
      ;;
    *)
      if test -z "${search-}"; then
        search="$1"
      elif test -z "${replacement-}"; then
        replacement="$1"
      else
        PASSTHROUGH_ARGS+=("$@")
        shift "$#"
        break
      fi
      shift
      ;;
  esac
done
##################################################################################################################################################

function check_debug() {
  test "${debug_mode-}" = "true"
}

function check_verbose() {
  test "${verbose-}" = "true"
}

function log_sep() {
  echo '---------------------------------------------------------------------------'
}

function should_use_gsed() {
  test "${use_gsed-}" = "true"
}

function exit_failure() {
  if test "${no_exit_status-}" = "true"; then
    exit 0
  else
    exit 1
  fi
}

function find_sed_sep() {
  local all="$1" ascii sep idx
  case "$all" in
    */*)
      ascii="$(for ((idx = 32; idx <= 127; idx++)); do printf '%b' "\\$(printf '%03o' "$idx")"; done)"
      sep="$(printf '%s' "$ascii" | tr -d "$all")"
      sep="$(printf %.1s "$sep")"
      if test -z "${sep-}"; then
        echo 'could not find an unused character for sed separator character' >&2
        return 1
      fi
      ;;
    *)
      sep=/
      ;;
  esac

  echo "$sep"
}

function run_git_grep() {
  git "${git_grep_config_args[@]}" --no-pager grep "$@" "${git_grep_end_args[@]}"
}

function show_updated_lines() {
  # shellcheck disable=SC2155
  local file_and_num file_path line_num purple="$(printf "\033[0;35m")" cyan="$(printf "\033[0;36m")" green="$(printf "\033[0;32m")" clear_color="$(printf "\033[0m")"

  log_sep
  echo UPDATED
  log_sep

  for file_and_num in "$@"; do
    file_path="$(echo "$file_and_num" | pcregrep -o1 '^(.*?)\:(\d+)$')"
    line_num="$(echo "$file_and_num" | pcregrep -o2 '^(.*?)\:(\d+)$')"

    if test -z "${do_grep_replacement-}"; then
      if gsed "${line_num}q;d" "$file_path" | grep -q "$replacement" >/dev/null 2>&1; then
        do_grep_replacement=true
      else
        do_grep_replacement=false
      fi
    fi

    if test "${do_grep_replacement-}" = "true"; then
      gsed "${line_num}q;d" "$file_path" | gsed "s|^|${purple}${file_path}${cyan}:${green}${line_num}${cyan}:${clear_color}|g" | grep --color=always "${replacement}"
    else
      gsed "${line_num}q;d" "$file_path" | gsed "s|^|${purple}${file_path}${cyan}:${green}${line_num}${cyan}:${clear_color}|g"
    fi
  done
}

function configure_gsed() {
  local sep

  if ! sep="$(find_sed_sep "${search-}${replacement-}${flags-}")"; then
    exit 1
  fi

  # shellcheck disable=SC2206
  xargs_args+=(gsed -i -r "s$sep${search-}$sep${replacement-}$sep${flags-}")
}

function configure_sd() {
  xargs_args+=(sd)

  if test -n "${flags-}"; then
    xargs_args+=(--flags "$flags")
  fi

  if test "${string_mode-}" = "true"; then
    xargs_args+=(--string-mode)
  fi

  xargs_args+=("${search-}" "${replacement-}")
}

function main() {
  local maybe_xargs_r_param git_grep_args matched_lines

  if should_use_gsed && test -z "${flags-}"; then
    flags='g'
  fi

  # shellcheck disable=SC2015
  maybe_xargs_r_param="$(xargs -r false </dev/null >/dev/null 2>&1 && echo r || true)"
  xargs_args=(-0"$maybe_xargs_r_param")

  if should_use_gsed; then
    configure_gsed
  else
    configure_sd
  fi

  git_grep_end_args=(--untracked "${PASSTHROUGH_ARGS[@]}" "${git_grep_regex:-${search-}}" "${END_ARGS[@]}")
  git_grep_args=("${git_grep_config_args[@]}" grep -lz "${git_grep_end_args[@]}")

  if check_debug || check_verbose; then
    echo "COMMAND"
    echo "git ${git_grep_args[*]} | xargs ${xargs_args[*]}"
  fi

  if check_debug; then
    exit 0
  fi

  if test "${print_name_only-}" = "true"; then
    if ! run_git_grep --files-with-matches; then
      exit_failure
    fi
  elif test "${no_print_matches-}" != "true"; then
    if ! run_git_grep; then
      echo "No matches found" >&2
      exit_failure
    fi
    mapfile -t matched_lines < <(run_git_grep | pcregrep -o1 '^([^\:]+?\:\d+)\:')
  elif ! run_git_grep -q; then
    exit_failure
  fi

  git "${git_grep_args[@]}" | xargs "${xargs_args[@]}"

  if test "${no_print_matches-}" != "true"; then
    show_updated_lines "${matched_lines[@]}"
  fi

  return 0
}

main
