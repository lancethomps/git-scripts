#!/usr/bin/env bash
################################################################### SETUP ########################################################################
set -o errexit -o errtrace -o nounset
##################################################################################################################################################

export GREP_OPTIONS=
flags='g'

if command -v git-in-repo >/dev/null 2>&1 && ! git in-repo; then
  exit_fatal "Not in a git repo"
fi

if ! command -v gsed >/dev/null 2>&1; then
  if test "$(uname)" = "Darwin"; then
    echo "gsed not found, running: brew install gsed"
    brew install gsed
  else
    alias gsed='sed'
  fi
fi

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local _SCRIPT_NAME_GIT
  _SCRIPT_NAME_GIT="${_SCRIPT_NAME/git-/git }"

  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME_GIT}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME_GIT} [-f | --flags <flags>] <search> <replacement> [<git_grep_arg>...]
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]

EXAMPLES
       ${_SCRIPT_NAME_GIT} --flags g xyz abc
EOF
}
##################################################################################################################################################

################################################################# FILTERARGS #####################################################################
PASSTHROUGH_ARGS=()
END_ARGS=()
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      export debug_mode=true
      shift
      ;;
    --verbose)
      export verbose=true
      shift
      ;;
    -f | --flags)
      shift
      flags="$1"
      shift
      ;;
    --)
      END_ARGS+=("$@")
      shift "$#"
      break
      ;;
    *)
      if test -z "${search-}"; then
        search="$1"
      elif test -z "${replacement-}"; then
        replacement="$1"
      else
        PASSTHROUGH_ARGS+=("$@")
        shift "$#"
        break
      fi
      shift
      ;;
  esac
done
##################################################################################################################################################

function check_debug() {
  test "${debug_mode-}" = "true"
}

function check_verbose() {
  test "${verbose-}" = "true"
}

function main() {
  local all ascii sep r git_grep_args xargs_args

  all="${search-}${replacement-}${flags-}"
  case "$all" in
    */*)
      ascii="$(for ((i = 32; i <= 127; i++)); do printf '%b' "\\$(printf '%03o' "$i")"; done)"
      sep="$(printf '%s' "$ascii" | tr -d "$all")"
      sep="$(printf %.1s "$sep")"
      if [ "X$sep" = "X" ]; then
        echo 'could not find an unused character for sed separator character'
        exit 1
      fi
      ;;
    *)
      sep=/
      ;;
  esac

  # shellcheck disable=SC2015
  r="$(xargs -r false </dev/null >/dev/null 2>&1 && echo r || true)"

  git_grep_args=(-c grep.fullname=false grep -lz "${PASSTHROUGH_ARGS[@]}" "${search-}" "${END_ARGS[@]}")
  # shellcheck disable=SC2206
  xargs_args=(-0"$r" gsed -i -r "s$sep${search-}$sep${replacement-}$sep${flags-}")

  if check_debug || check_verbose; then
    echo "COMMAND"
    echo "git ${git_grep_args[*]} | xargs ${xargs_args[*]}"
  fi

  if check_debug; then
    exit 0
  fi

  git "${git_grep_args[@]}" | xargs "${xargs_args[@]}"
}

main "$@"
