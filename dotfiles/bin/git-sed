#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=bin/.git_command_defaults.sh disable=SC2016
if test -e "${_SCRIPT_DIR}/.git_command_defaults.sh"; then source "${_SCRIPT_DIR}/.git_command_defaults.sh"; else echo '"${_SCRIPT_DIR}/.git_command_defaults.sh" does not exist - resolved to: '"${_SCRIPT_DIR}/.git_command_defaults.sh" && exit 1; fi
##################################################################################################################################################

# reset environment variables that could interfere with normal usage
export GREP_OPTIONS=
# put all utility functions here

# make a temporary file
git_extra_mktemp() {
  mktemp -t "$(basename "$0")".XXXXXXX
}

#
# check whether current directory is inside a git repository
#

is_git_repo() {
  git rev-parse --show-toplevel >/dev/null 2>&1
  result=$?
  if test $result != 0; then
    echo >&2 'Not a git repo!'
    exit $result
  fi
}

is_git_repo

usage() {
  cat <<EOF
usage: git sed [ -c ] [ -f <flags> ] <search> <replacement>

Run git grep and then send results to sed for replacement with the
given flags, if they are provided via -f or as the third argument.

Also runs git commit if -c is provided.
EOF
}

# don't commit by default
do_commit() {
  true
}

flags='g'

while [ "X${1-}" != "X" ]; do
  case "$1" in
    -c | --commit)
      if git status --porcelain | grep .; then
        echo "you need to commit your changes before running with --commit"
        exit 1
      fi
      do_commit() {
        git commit -m"replace ${search-} with ${replacement-}

actual command:

    $command" -a
      }
      ;;
    -f | --flags)
      if test -z "${2-}"; then
        usage
        echo "missing argument for $1"
        exit 1
      fi
      shift
      flags="$1"
      ;;
    -h | --help)
      usage
      exit
      ;;
    -*)
      usage
      echo "unknown flag: $1"
      exit 1
      ;;
    *)
      if test -z "${search-}"; then
        search="$1"
      elif test -z "${replacement-}"; then
        replacement="$1"
      else
        usage
        echo "too many arguments: $1"
        exit 1
      fi
      ;;
  esac
  shift
done

all="${search-}${replacement-}${flags-}"
case "$all" in
  */*)
    ascii="$(for ((i = 32; i <= 127; i++)); do printf '%b' "\\$(printf '%03o' "$i")"; done)"
    sep="$(printf '%s' "$ascii" | tr -d "$all")"
    sep="$(printf %.1s "$sep")"
    if [ "X$sep" = "X" ]; then
      echo 'could not find an unused character for sed separator character'
      exit 1
    fi
    ;;
  *)
    sep=/
    ;;
esac

# shellcheck disable=SC2015
r="$(xargs -r false </dev/null >/dev/null 2>&1 && echo r || true)"
need_bak="$(sed -i s/hello/world/ "$(git_extra_mktemp)" >/dev/null 2>&1 || echo true)"

if [ "$need_bak" ]; then
  command="git -c grep.fullname=false grep -lz '${search-}' | xargs -0$r ${_sed_ext_in_place:?} 's$sep${search-}$sep${replacement-}$sep${flags-}'"
  if check_debug; then
    echo "COMMAND"
    echo_with_sep "$command"
  else
    # shellcheck disable=SC2086,SC2090
    git -c grep.fullname=false grep -lz "${search-}" | xargs -0"$r" ${_sed_ext_in_place:?} "s$sep${search-}$sep${replacement-}$sep${flags-}"
  fi
else
  command="git -c grep.fullname=false grep -lz '${search-}' | xargs -0$r ${_sed_ext_in_place:?} 's$sep${search-}$sep${replacement-}$sep${flags-}'"
  if check_debug; then
    echo "COMMAND"
    echo_with_sep "$command"
  else
    # shellcheck disable=SC2086,SC2090
    git -c grep.fullname=false grep -lz "${search-}" | xargs -0"$r" ${_sed_ext_in_place:?} "s$sep${search-}$sep${replacement-}$sep${flags-}"
  fi
fi
do_commit
