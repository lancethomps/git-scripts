#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
# shellcheck source=./.git_command_defaults.sh
source "${_SCRIPT_DIR}/.git_command_defaults.sh" || exit 1
##################################################################################################################################################

HOOKS_PATH="$(git config core.hooksPath || echo "hooks")"
if [[ $HOOKS_PATH == /* ]]; then
  INSTALL_TO_HOOKS_DIR="${HOOKS_PATH}"
else
  INSTALL_TO_HOOKS_DIR="$(git rev-parse --absolute-git-dir)/${HOOKS_PATH}"
fi

HOOKS_DIR="$(shell_realpath "${_SCRIPT_DIR}/../../hooks")"
function list_hooks() {
  find "$HOOKS_DIR" -type f -not -name '.*' -perm +111 -exec basename {} \; | sort
}
function list_installed_hooks() {
  local gitscripts_base curr_dir
  curr_dir="$(pwd)"
  cd "$_SCRIPT_DIR/../.." || return 1
  gitscripts_base="$(pwd)"
  find "$INSTALL_TO_HOOKS_DIR" -type l -depth 2 -perm +111 -exec readlink {} \; | grep "$gitscripts_base" | xargs -n1 basename | sort
  cd "$curr_dir" || return 0
}

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  local SYNOP_INDENT
  SYNOP_INDENT="$(head -c "$(echo -n "${_SCRIPT_NAME}" | wc -c)" </dev/zero | tr '\0' " ")"

  cat <<EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} <hook_name>...
       ${SYNOP_INDENT} [--help] [--debug] [--verbose]
       ${SYNOP_INDENT} [--list]

EXAMPLES
       ${_SCRIPT_NAME} pre-push_make-lint

HOOKS
$(list_hooks | sed -e 's/^/       /')

INSTALLED HOOKS
$(list_installed_hooks | sed -e 's/^/       /')
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      shift
      export debug_mode=true
      ;;
    --verbose)
      shift
      export verbose=true
      ;;
    --list)
      shift
      list_installed_hooks
      exit $?
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Unknown option: $1"
      _usage
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

if test -z "${1:-}"; then
  _usage "$@"
  exit 1
fi
##################################################################################################################################################

function uninstall_hook() {
  local hook_name hook_type install_to_dir install_to_file
  hook_name="$1"
  hook_type="${hook_name%_*}"
  install_to_dir="${INSTALL_TO_HOOKS_DIR}/${hook_type}.d"
  install_to_file="${install_to_dir}/${hook_name}"

  if ! test -e "$install_to_file"; then
    echo "Git hook not installed at path: ${install_to_file}"
    return 1
  fi

  if check_debug; then
    echo rm -v "$install_to_file"
  else
    rm -v "$install_to_file"
  fi
}

for hook_name in "$@"; do
  uninstall_hook "$hook_name"
done
