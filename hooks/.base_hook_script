#!/usr/bin/env bash
#GIT_SCRIPTS_BASE_HOOK_SCRIPT

# This script should be saved in a git repo as a hook file, e.g. .git/hooks/pre-receive.
# It looks for scripts in the .git/hooks/${hook_name}.d directory and executes them in order,
# passing along stdin. If any script exits with a non-zero status, this script exits.

declare -x hook_scripts=() script_dir hook_name

script_dir="$(dirname "$0")"
hook_name="$(basename "$0")"

function log_sep() {
  log_stderr '----------------------------------------------------------------------------------'
}

function log_stderr() {
  echo "$@" >&2
}

function log_verbose() {
  if test "${verbose-}" = "true"; then
    log_stderr "$@"
  fi

  return 0
}

# shellcheck disable=SC2317
function add_project_hook_if_available() {
  local project_hook

  project_hook="$(git rev-parse --show-toplevel)/.hooks/$hook_name"
  if test -e "${project_hook}"; then
    hook_scripts+=("${project_hook}")
  fi

  return 0
}

hook_dir="$script_dir/$hook_name.d"
if test -e "$hook_dir"; then
  mapfile -d $'\0' -t -O "${#hook_scripts[@]}" hook_scripts < <(find -Ls "$hook_dir" -type f -perm +111 -print0)
else
  log_verbose "[ERROR] No hooks found at ${hook_dir}"
fi

#add_project_hook_if_available

if test "${#hook_scripts[@]}" -gt 0; then
  stdin="$(cat /dev/stdin)"

  if test "${hook_name-}" = "pre-push"; then
    mapfile -d " " -t PUSH_INFO </dev/stdin
    export PUSH_INFO
    export LOCAL_REF="${PUSH_INFO[1]}"
    export LOCAL_SHA="${PUSH_INFO[2]}"
    export REMOTE_REF="${PUSH_INFO[3]}"
    export REMOTE_SHA="${PUSH_INFO[4]}"
  fi

  for hook in "${hook_scripts[@]}"; do
    log_stderr
    log_stderr "Running $hook_name hook at ${hook}"
    log_sep

    echo "$stdin" | "$hook" "$@"
    exit_code=$?

    if test "$exit_code" -ne 0; then
      exit "$exit_code"
    fi
  done
else
  log_stderr "[ERROR] No hooks found at ${hook_dir}"
  exit 1
fi

exit 0
